services:
  config-server:
    build: ./config-server
    image: config-server
    platform: linux/x86_64
    container_name: config-server
    ports:
      - "8071:8071"


  eureka-server:
    build: ./eureka-server
    image: eureka-server
    platform: linux/x86_64
    container_name: eureka-server
    ports:
      - "8070:8070"
    depends_on:
      - config-server
    restart: on-failure

  api-gateway:
    build: ./api-gateway
    image: api-gateway
    platform: linux/x86_64
    container_name: api-gateway
    ports:
      - "8072:8072"
    restart: on-failure

  item-service:
    build: ./item
    image: item
    platform: linux/x86_64
    container_name: item
    ports:
      - "9090:9090"
    depends_on:
      - item-db
      - config-server
    restart: on-failure

  thing-service:
    build: ./thing
    image: thing
    platform: linux/x86_64
    container_name: thing
    ports:
      - "8282:8282"
    depends_on:
      - thing-db
      - config-server
    restart: on-failure

  thing-service2:
    build: ./thing
    image: thing2
    platform: linux/x86_64
    container_name: thing2
    ports:
      - "8081:8081"
    depends_on:
      - thing-db
      - config-server
    restart: on-failure

  item-db:
    image: postgres:13.7-alpine
    container_name: item-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=item
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root

  thing-db:
    image: postgres:13.7-alpine
    container_name: thing-db
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=thing
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root

  keycloak-db:
    image: postgres:13.7-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=root

  keycloak:
    depends_on:
      keycloak-db:
        condition: service_started
    image: jboss/keycloak
    restart: always
    environment:
      #      KEYCLOAK_USER: admin
      #      KEYCLOAK_PASSWORD: admin
      DB_VENDOR: postgres
      DB_ADDR: keycloak-db
      DB_DATABASE: keycloak
      DB_USER: postgres
      DB_PASSWORD: root
    ports:
      - "8080:8080"

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    expose:
      - "2181"
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://1.2.3.4:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OPTS: "-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_CREATE_TOPICS: "newItem"
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
    depends_on:
      - zookeeper
    volumes:
      - ./:/etc/kafka




  redisserver:
    image: redis:alpine
    ports:
      - 6379:6379
    command:
      - /bin/sh
      - -c
      - redis-server --requirepass "redisRoot" #должен бы лежать в .env, но это не прод


#  vault здесь только для тестов, в девмоде. Настройки по прежнему подтянутся из yaml
#  vault:
#    image: vault:1.13.3
#    container_name: vault
#    ports:
#      - "8200:8200"
#    restart: unless-stopped
#    volumes:
#      - ./logs:/vault/logs
#      - ./file:/vault/file
#      - ./config:/vault/config
#    cap_add:
#      - IPC_LOCK
